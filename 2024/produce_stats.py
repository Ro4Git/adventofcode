# generated by CHATGPT
#  generate a aoc2024_stats.html page based on the current leaderbord json ("leaderboard.json") in the same path
import json
from datetime import datetime, timedelta
import numpy as np
from jinja2 import Template

aoc_year = "2024"

# Load JSON data
def load_json(file_path):
    with open(file_path, 'r') as f:
        return json.load(f)

# Generate hourly data
def generate_hourly_data(members, days=25):
    hourly_data = {}
    for day in range(1, days + 1):
        data = [0] * 24
        for member in members.values():
            for completion_day, puzzles in member.get("completion_day_level", {}).items():
                if int(completion_day) == day:
                    for puzzle, details in puzzles.items():
                        hour = datetime.utcfromtimestamp(details["get_star_ts"]) + timedelta(hours=1)
                        adjusted_hour = hour.hour
                        data[adjusted_hour] += 1

        max_value = max(data)
        hourly_data[day] = {
            "data": data,
            "max": max_value,
            "colors": [
                f"rgb({160 - value * 80 // (max_value or 1)}, {55 + value * 80 // (max_value or 1)}, 20)"
                for value in data
            ]
        }
    return hourly_data

# Generate top solvers for part 1 or 2
def generate_top_solvers(members, part, days=25):
    top_solvers = {day: [] for day in range(1, days + 1)}
    for member in members.values():
        name = member.get("name", "Anonymous")
        for day, puzzles in member.get("completion_day_level", {}).items():
            day = int(day)  # Ensure day is an integer
            if str(part) in puzzles:
                time = puzzles[str(part)]["get_star_ts"]
                # Adjust time to contest start time (6 AM GMT+1)
                contest_start = datetime.utcfromtimestamp((day - 1) * 86400 + 6 * 3600) + timedelta(hours=1)
                puzzle_time = datetime.utcfromtimestamp(time) + timedelta(hours=1)
                if puzzle_time >= contest_start:
                    formatted_time = puzzle_time.strftime("%H:%M")
                    top_solvers[day].append((name, puzzle_time))
    for day in top_solvers:
        top_solvers[day] = sorted(top_solvers[day], key=lambda x: x[1])[:10]
        top_solvers[day] = [(solver[0], solver[1].strftime("%H:%M")) for solver in top_solvers[day]]
    return top_solvers

# Generate fastest solvers for part 2
def generate_fastest_solvers(members, days=25):
    fastest_solvers = {day: [] for day in range(1, days + 1)}
    median_times = {}
    for day in range(1, days + 1):
        times = []
        for member in members.values():
            name = member.get("name", "Anonymous")
            if str(day) in member.get("completion_day_level", {}):
                puzzles = member["completion_day_level"][str(day)]
                if "1" in puzzles and "2" in puzzles:
                    start_time = puzzles["1"]["get_star_ts"]
                    end_time = puzzles["2"]["get_star_ts"]
                    solve_time = end_time - start_time
                    times.append(solve_time)
                    minutes, seconds = divmod(solve_time, 60)
                    formatted_time = f"{minutes}:{seconds:02}"
                    fastest_solvers[day].append((name, solve_time, formatted_time))
        fastest_solvers[day] = sorted(fastest_solvers[day], key=lambda x: x[1])[:10]
        fastest_solvers[day] = [(solver[0], solver[2]) for solver in fastest_solvers[day]]
        if times:
            median_time = np.median(times)
            median_times[day] = f"{int(median_time) // 60}:{int(median_time) % 60:02}"
        else:
            median_times[day] = "--"
    return fastest_solvers, median_times

# Generate HTML report
def generate_html(hourly_data, top_part1, top_part2, fastest_part2, median_times, year):
    generation_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    template_content = """
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>King Advent of Code Stats</title>
        <style>
            body {
                font-family: 'Courier New', Courier, monospace;
                background-color: #0f0f23;
                color: #dcdcdc;
                margin: 0;
                padding: 0;
                line-height: 1;
            }
            h1, h2, h3 {
                color: #00ff00;
                text-align: center;
            }
            .generated-time {
                text-align: center;
                color: #dcdcdc;
                font-size: 0.9em;
                margin-top: -10px;
            }
            table {
                width: 90%;
                margin: 20px auto;
                border-collapse: collapse;
                background-color: #1a1a40;
                color: #dcdcdc;
            }
            th, td {
                border: 1px solid #333;
                padding: 10px;
                text-align: center;
                vertical-align: bottom;
            }
            th {
                background-color: #333;
                color: #00ff00;
                padding: 10px;
                line-height: 1.5;
            }
           .heatmap td,th {
                border: 1px solid #333;
                padding: 0px;
                text-align: center;
                vertical-align: bottom;
            }
           .heatmap th {
                background-color: #333;
                color: #00ff00;
            }            
            
            .day-selector td {
                background: #1a1a40;
                cursor: pointer;
                text-align: center;
                color: #00ff00;
                padding: 10px;
                line-height: 1.5;
            }
            .day-selector th {
                background-color: #333;
                color: #00ff00;
                cursor: pointer;
            }            
            .day-selector .selected {
                background: #00ff00;
                color: #0f0f23;
            }
            .section {
                display: none;
            }
            .section.active {
                display: block;
            }
            .three-columns {
                display: flex;
                justify-content: space-around;
                margin: 20px auto;
            }
            .column {
                width: 30%;
                background-color: #1a1a40;
                padding: 10px;
                border: 1px solid #333;
                border-radius: 5px;
            }
            .one-column {
                justify-content: space-around;
                margin: 20px auto;
                width: 95%;
                background-color: #1a1a40;
                padding: 10px;
                border: 1px solid #333;
                border-radius: 5px;
            }            
            .bar {
                width: 100%;
                height: 100px;
                position: relative;
                display: flex;
                align-items: flex-end;
                justify-content: center;
            }
            .bar div {
                width: 100%;
                height: 100%;
                position: absolute;
                bottom: 0;
            }
            .bar span {
                position: absolute;
                bottom: 2px;
                color: #dcdcdc;
                font-size: 12px;
                font-weight: bold;
                text-shadow: 1px 1px 0 black;
            }
        </style>
        <script>
            function selectDay(day) {
                const allDays = document.querySelectorAll(".day-selector td");
                const allSections = document.querySelectorAll(".section");

                allDays.forEach(td => td.classList.remove("selected"));
                allSections.forEach(section => section.classList.remove("active"));

                document.querySelector(`#day-${day}`).classList.add("selected");
                document.querySelector(`#section-day-${day}`).classList.add("active");
            }
        </script>
    </head>
    <body>
        <header>
            <h1>King Advent of Code {{year}} Stats</h1>
            <div class="generated-time">Last generated: {{ generation_time }}</div>
        </header>
        <section>
            <h2>Select a Day</h2>
            <table class="day-selector">
                <tr>
                    {% for day in range(1, 26) %}
                    <td id="day-{{ day }}" onclick="selectDay({{ day }})">Day {{ day }}</td>
                    {% endfor %}
                </tr>
            </table>
        </section>
        {% for day in range(1, 26) %}
        <section id="section-day-{{ day }}" class="section">
            <h2>Results for Day {{ day }}</h2>
            <div class="three-columns">
                <div class="column">
                    <h3>Earliest to Solve Part 1</h3>
                    <table>
                        <tr>
                            <th>Rank</th>
                            <th>Name</th>
                            <th>Time of the day(h:m)</th>
                        </tr>
                        {% for solver in top_part1[day] %}
                        <tr>
                            <td>{{ loop.index }}</td>
                            <td>{{ solver[0] }}</td>
                            <td>{{ solver[1] }}</td>
                        </tr>
                        {% endfor %}
                    </table>
                </div>
                <div class="column">
                    <h3>Earliest to Solve Part 2</h3>
                    <table>
                        <tr>
                            <th>Rank</th>
                            <th>Name</th>
                            <th>Time of the day(h:m)</th>
                        </tr>
                        {% for solver in top_part2[day] %}
                        <tr>
                            <td>{{ loop.index }}</td>
                            <td>{{ solver[0] }}</td>
                            <td>{{ solver[1] }}</td>
                        </tr>
                        {% endfor %}
                    </table>
                </div>
                <div class="column">
                    <h3>Fastest Part1 -> Part2 (Median: {{ median_times[day] }})</h3>
                    <table>
                        <tr>
                            <th>Rank</th>
                            <th>Name</th>
                            <th>Time Taken(m:s)</th>
                        </tr>
                        {% for solver in fastest_part2[day] %}
                        <tr>
                            <td>{{ loop.index }}</td>
                            <td>{{ solver[0] }}</td>
                            <td>{{ solver[1] }}</td>
                        </tr>
                        {% endfor %}
                    </table>
                </div>
            </div>
            <div class="one-column">
                <h3>Stars Per Hour (GMT+1)</h3>
                <table class = "heatmap">
                    <tr>
                        {% for hour in range(6, 24) %}
                        <th>{{ hour }}:00</th>
                        {% endfor %}
                    </tr>
                    <tr>
                        {% for hour in range(6, 24) %}
                        <td>
                            <div class="bar">
                                <div style="height: {{ hourly_data[day]["data"][hour] * 100 // (hourly_data[day]["max"] or 1) }}%; background-color: {{ hourly_data[day]["colors"][hour] }};"></div>
                                <span>{{ hourly_data[day]["data"][hour] }}</span>
                            </div>
                        </td>
                        {% endfor %}
                    </tr>
                </table>
            </div>                    
        </section>
        {% endfor %}
    </body>
    </html>
    """
    template = Template(template_content)
    html_content = template.render(
        hourly_data=hourly_data,
        top_part1=top_part1,
        top_part2=top_part2,
        fastest_part2=fastest_part2,
        median_times=median_times,
        year=aoc_year,
        generation_time=generation_time
    )
    with open("aoc_" + aoc_year + "_stats.html", "w") as f:
        f.write(html_content)

if __name__ == "__main__":
    # Load data
    data = load_json("leaderboard_" + aoc_year + ".json")
    members = data["members"]

    # Generate sections
    hourly_data = generate_hourly_data(members)
    top_part1 = generate_top_solvers(members, part=1)
    top_part2 = generate_top_solvers(members, part=2)
    fastest_part2, median_times = generate_fastest_solvers(members)

    # Generate HTML report
    generate_html(hourly_data, top_part1, top_part2, fastest_part2, median_times, aoc_year)
